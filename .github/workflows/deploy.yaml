name: Deploy Spring Boot App

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR 이미지 태그 (예: v1.0.0)'
        required: true

env:
  AWS_REGION: ap-northeast-2
  ECR_HOST: ${{ secrets.ECR_HOST }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 0. Checkout this repo
      - name: Checkout this repo
        uses: actions/checkout@v2

      # 1. 환경 변수 설정
      - name: Set environment variables
        run: |
          echo "ECR_REPO_NAME=eks-app-repo" >> $GITHUB_ENV
          echo "SSM_PATH=/spring/prod/"     >> $GITHUB_ENV

      # 2. 태그 중복 확인
      - name: Check if tag already exists in ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          RESULT=$(aws ecr describe-images \
            --registry-id ${ECR_HOST%%.*} \
            --repository-name $ECR_REPO_NAME \
            --image-ids imageTag=$IMAGE_TAG \
            --region $AWS_REGION 2>/dev/null || true)
          if echo "$RESULT" | grep -q imageDigest; then
            echo "❌ ERROR: Tag '$IMAGE_TAG' already exists in $FULL_REPO."
            exit 1
          fi

      # 3. Docker 빌드 & 푸시
      - name: Build and Push Docker image to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_HOST

          docker build -t my-spring-app .
          docker tag my-spring-app:latest $FULL_REPO:$IMAGE_TAG
          docker tag my-spring-app:latest $FULL_REPO:latest
          docker push $FULL_REPO:$IMAGE_TAG
          docker push $FULL_REPO:latest

      # 4. GitOps 레포 clone
      - name: Clone GitOps repository
        run: |
          git clone https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/Kim-Min-Gyeong/21-iceT-GitOps.git

      # 5. spring-secret.yaml 생성 (커밋하지 않음)
      - name: Generate Kubernetes Secret YAML from SSM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: spring-env-secret
            namespace: springboot
          type: Opaque
          stringData:" > 21-iceT-GitOps/apps/springboot/spring-secret.yaml

          aws ssm get-parameters-by-path \
            --path "$SSM_PATH" \
            --with-decryption \
            --region $AWS_REGION \
            --query 'Parameters[*].{Name:Name,Value:Value}' \
            --output text \
          | while IFS=$'\t' read -r name value; do
              [[ -n "$name" ]] || continue
              key=$(basename "$name" | tr '.' '_' | tr '[:lower:]' '[:upper:]')
              echo "  $key: \"$value\"" >> 21-iceT-GitOps/apps/springboot/spring-secret.yaml
            done

      # 6. deployment.yaml 이미지 태그 업데이트
      - name: Update image tag in deployment.yaml
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          sed -i "s|image:.*|image: ${FULL_REPO}:${IMAGE_TAG}|" 21-iceT-GitOps/apps/springboot/deployment.yaml

      # 7. GitOps 레포 커밋 (secret.yaml 제외)
      - name: Commit and push to GitOps repo
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add 21-iceT-GitOps/apps/springboot/deployment.yaml

          if ! git diff --cached --quiet; then
            git commit -m "Update Spring image to ${IMAGE_TAG}"
            git push
          else
            echo "ℹ️ No changes to commit"
          fi

      # 8. AWS OIDC 인증
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 9. EKS kubeconfig 설정
      - name: Setup kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # 10. Secret 직접 적용
      - name: Apply Secret to EKS
        run: |
          kubectl apply -f spring-secret.yaml
