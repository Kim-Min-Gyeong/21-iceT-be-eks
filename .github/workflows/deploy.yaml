name: Deploy Spring Boot App

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏'
        required: true

env:
  AWS_REGION: ap-northeast-2
  ECR_HOST: ${{ secrets.ECR_HOST }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 1) Set dynamic S3 bucket and ECR repo name based on branch
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Configure environment for branch
        run: |
            echo "S3_BUCKET=eks-koco-codedeploy-artifacts" >> $GITHUB_ENV
            echo "ECR_REPO_NAME=eks-app-repo"              >> $GITHUB_ENV
            echo "SSM_PATH=/spring/prod/"                  >> $GITHUB_ENV

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 2) If manual dispatch, check for existing tag
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Check if tag already exists in ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          echo "üîç Checking if tag '$IMAGE_TAG' exists at $FULL_REPO..."
          RESULT=$(aws ecr describe-images \
            --registry-id ${ECR_HOST%%.*} \
            --repository-name $ECR_REPO_NAME \
            --image-ids imageTag=$IMAGE_TAG \
            --region $AWS_REGION 2>/dev/null || true)
          if echo "$RESULT" | grep -q imageDigest; then
            echo "‚ùå ERROR: Tag '$IMAGE_TAG' already exists in $FULL_REPO."
            exit 1
          fi

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 3) Build & Push Docker image for both dev and main
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Build and Push Docker image to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          echo "üîê Logging in to Amazon ECR at $FULL_REPO..."
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_HOST

          echo "üîß Building Docker image..."
          docker build -t my-spring-app .

          echo "üè∑ Tagging image with version: $IMAGE_TAG"
          docker tag my-spring-app:latest $FULL_REPO:$IMAGE_TAG

          echo "üè∑ Tagging image as latest"
          docker tag my-spring-app:latest $FULL_REPO:latest

          echo "üì§ Pushing image $FULL_REPO:$IMAGE_TAG"
          docker push $FULL_REPO:$IMAGE_TAG

      # 4) Generate Kubernetes Secret from SSM
      - name: Generate Kubernetes Secret YAML from SSM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |

          mkdir -p 21-iceT-GitOps/apps/spring
          
          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: spring-env-secret
            namespace: springboot
          type: Opaque
          stringData:" > 21-iceT-GitOps/apps/spring/spring-secret.yaml

          aws ssm get-parameters-by-path \
            --path "/spring/prod/" \
            --with-decryption \
            --region ap-northeast-2 \
            --query 'Parameters[*].{Name:Name,Value:Value}' \
            --output text \
          | while IFS=$'\t' read -r name value; do
              [[ -n "$name" ]] || continue
              key=$(basename "$name" | tr '.' '_' | tr '[:lower:]' '[:upper:]')
              echo "  $key: \"$value\"" >> 21-iceT-GitOps/apps/spring/spring-secret.yaml
            done

      # 5) Update image tag in Kubernetes manifest
      - name: Update image tag in deployment.yaml
        run: |
          FULL_REPO="$ECR_HOST/$ECR_REPO_NAME"
          sed -i "s|image:.*|image: ${FULL_REPO}:${IMAGE_TAG}|" 21-iceT-GitOps/apps/spring/deployment.yaml

      # 6) Commit & push to GitOps repository
      - name: Commit and push to GitOps repo
        run: |
          cd 21-iceT-GitOps
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add apps/spring/deployment.yaml apps/spring/spring-secret.yaml

          if ! git diff --cached --quiet; then
            git commit -m "Update Spring image to ${IMAGE_TAG} and update secret"
            git push
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi
